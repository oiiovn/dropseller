<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\User;
use App\Models\Transaction;
use App\Models\BalanceHistory;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;

class GenerateAllBalanceHistories extends Command
{
    protected $signature = 'balance:rebuild-all';
    protected $description = 'Xo√° to√†n b·ªô l·ªãch s·ª≠ c≈© v√† t·∫°o l·∫°i t·ª´ ƒë·∫ßu.';

    public function handle()
    {
        $this->warn('‚ö†Ô∏è ƒêang xo√° to√†n b·ªô d·ªØ li·ªáu c≈© trong b·∫£ng balance_histories...');

        // X√≥a to√†n b·ªô d·ªØ li·ªáu c≈©
        Schema::disableForeignKeyConstraints();
        DB::table('balance_histories')->truncate();
        Schema::enableForeignKeyConstraints();

        $this->info('üßπ ƒê√£ xo√° xong. B·∫Øt ƒë·∫ßu t·∫°o l·ªãch s·ª≠ s·ªë d∆∞ m·ªõi...');

        $users = User::all();
        $allTransactions = Transaction::orderBy('transaction_date', 'asc')->get();

        $userCount = 0;
        $newLogs = 0;

        foreach ($users as $user) {
            $userCode = $user->referral_code;
            $escapedCode = preg_quote($userCode, '/');
            $runningBalance = 0;

            // D√πng regex chu·∫©n ƒë·ªÉ l·ªçc ƒë√∫ng giao d·ªãch
            $transactions = $allTransactions->filter(function ($tran) use ($escapedCode) {
                return preg_match('/(^|[\s:#|\-(),.])' . $escapedCode . '([\s:#|\-(),.]|$)/', $tran->description);
            })->unique('id'); // tr√°nh tr√πng transaction

            foreach ($transactions as $tran) {
                $type = strtoupper(trim($tran->type));
                $change = $type === 'IN' ? (float)$tran->amount : -(float)$tran->amount;

                $runningBalance += $change;

                $balanceType = match ($tran->bank) {
                    'DROP' => $type === 'IN' ? 'refund' : 'order',
                    'ADS' => 'ads',
                    'PSP' => 'product_fee',
                    'QTD' => 'Monthly',
                    default => $type === 'IN' ? 'deposit' : 'withdraw',
                };

                BalanceHistory::insert([
                    'user_id' => $user->id,
                    'amount_change' => $change,
                    'balance_after' => $runningBalance,
                    'type' => $balanceType,
                    'reference_id' => $tran->id,
                    'reference_type' => 'transaction',
                    'transaction_code' => $tran->transaction_id,
                    'note' => $tran->description,
                    'created_at' => $tran->transaction_date,
                    'updated_at' => $tran->transaction_date,
                ]);

                $newLogs++;
            }

            $user->total_amount = round($runningBalance, 2);
            $user->save();
            $userCount++;
        }

        $this->info("‚úÖ ƒê√£ x·ª≠ l√Ω $userCount ng∆∞·ªùi d√πng, t·∫°o m·ªõi $newLogs b·∫£n ghi l·ªãch s·ª≠.");
    }
}
